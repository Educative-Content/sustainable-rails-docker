#!/bin/sh

set -e

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

. ${SCRIPT_DIR}/setupkit.sh.lib

usage_on_help "Initialize your development environment" "command" ${@}

ENV_FILE=$(realpath ${SCRIPT_DIR}/../docker-compose.env)
ENV_FILE_RELATIVE=$(realpath --relative-to=${SCRIPT_DIR}/.. $ENV_FILE)

if [ -e ${ENV_FILE} ]; then
  log "🛑" "Environment already initialized. You can edit ${ENV_FILE_RELATIVE} or delete it and start over"
  exit 1
fi

while [ -z "${PROJECT_NAME}" ]; do
  log "📊" "What is the name of your project?"
  read PROJECT_NAME
  if [ -z "${PROJECT_NAME}" ]; then
    log
    log "❓" "You must supply a value"
    log
  fi
done

while [ -z "${ORG}" ]; do
  log "🏢" "What is the name of your organization on GitHub or DockerHub?"
  read ORG
  if [ -z "${ORG}" ]; then
    log
    log "❓" "You must supply a value"
    log
  fi
done
while [ -z "${REPO}" ]; do
  log "💻" "What is the name of your repo or app's name? (hit return to use '${PROJECT_NAME}')"
  read REPO
  if [ -z "${REPO}" ]; then
    REPO=${PROJECT_NAME}
  fi
done
while [ -z "${TAG}" ]; do
  log "🏷" "What is the name of the initial tag to use?"
  read TAG
  if [ -z "${TAG}" ]; then
    log
    log "❓" "You must supply a value"
    log
  fi
done

IMAGE=${ORG}/${REPO}:${TAG}

while [ -z "${DOCKER_DEFAULT_PLATFORM}" ]; do
  if ! command -v ruby &> /dev/null; then
    PLATFORM_GUESS=""
  else
    PLATFORM_GUESS=$(docker version -f json | ruby -rjson -e "x = JSON.parse(STDIN.read)['Server']; puts x['Os'] + '/' + x['Arch']")
  fi

  log "💾" "What is your host's Docker platform?  (hit return to use '${PLATFORM_GUESS}')"
  read DOCKER_DEFAULT_PLATFORM
  if [ -z "${DOCKER_DEFAULT_PLATFORM}" ]; then
    DOCKER_DEFAULT_PLATFORM=${PLATFORM_GUESS}
  fi
  if [ "${DOCKER_DEFAULT_PLATFORM}" = "help" ]; then
    log
    log "ℹ️ " "Should be in format os/arch or os/arch/variant"
    log
    log "🪟" "If you are on an Intel or AMD chip, you most likely want linux/amd64"
    log "🍎" "If you are on Apple Silicon, you most likely want linux/arm64/v8"
    log "🤷" "Otherwise, prepare yourself:"
    log
    log "🕵️" "To figure this out you need to choose an os and an arch that match the list here:"
    log "🌎" "https://go.dev/doc/install/source#environment"
    log "🔎" "(search for GOOS on that page)"
    log
    log "😢" "For the variant, you are pretty much on your own, sorry"
    log
    DOCKER_DEFAULT_PLATFORM=""
  fi
done

echo "# This was generated by bin/init, howver you are free to modify it" > ${ENV_FILE}
echo "# IMAGE is the name of the image to be built for running" >> ${ENV_FILE}
echo "# your app. The recommended format is ORG/REPO:TAG" >> ${ENV_FILE}
echo "#" >> ${ENV_FILE}
echo "# ORG - your org on GitHub or DockerHub" >> ${ENV_FILE}
echo "# REPO - the name of the repo on GitHub or the app name" >> ${ENV_FILE}
echo "# TAG - a version identifier. Recommend you avoid "latest" as this is confusing" >> ${ENV_FILE}
echo "IMAGE=${IMAGE}" >> ${ENV_FILE}
echo "" >> ${ENV_FILE}
echo "# This is used to tell docker compose what the name" >> ${ENV_FILE}
echo "# of your project is for the purpose of naming" >> ${ENV_FILE}
echo "# containers. It can be anything and is mostly " >> ${ENV_FILE}
echo "# used for pruning containers via bin/prune" >> ${ENV_FILE}
echo "PROJECT_NAME=${PROJECT_NAME}" >> ${ENV_FILE}
echo "" >> ${ENV_FILE}
echo "# This is the platform to use for multi-platform" >> ${ENV_FILE}
echo "# images.  It is not easy to figure out what values" >> ${ENV_FILE}
echo "# are valid.  The format is os/arch/variant" >> ${ENV_FILE}
echo "#" >> ${ENV_FILE}
echo "# os - a value for the $GOOS env var from https://go.dev/doc/install/source#environment" >> ${ENV_FILE}
echo "# arch - value for the $GOARCH env var from https://go.dev/doc/install/source#environment" >> ${ENV_FILE}
echo "# variant - a value from the variant section of https://github.com/opencontainers/image-spec/blob/v1.0.2/image-index.md" >> ${ENV_FILE}
echo "#" >> ${ENV_FILE}
echo "# Note that https://go.dev/doc/install/source#environment lists valid os / arch combinations so that is a further" >> ${ENV_FILE}
echo "# constraint." >> ${ENV_FILE}
echo "#" >> ${ENV_FILE}
echo "# Also note that exotic combinations may not exist. Hopefully, you are on Windows, Linux, or" >> ${ENV_FILE}
echo "# Mac and can use linux/amd64 or linux/arm64" >> ${ENV_FILE}
echo "DOCKER_DEFAULT_PLATFORM=${DOCKER_DEFAULT_PLATFORM}" >> ${ENV_FILE}
echo "# vim: ft=bash" >> ${ENV_FILE}

log "🗄" "${ENV_FILE_RELATIVE} is ready to go. Edit Dockerfile, then do bin/build to get started"

# vim: ft=bash
